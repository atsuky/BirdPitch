<html>

<head>
   <meta charset=“utf-8”>
   <title>Equisde</title>
   <style>
       body {
           background: #000000;
           padding: 0px;
           margin: 0px;
       }
       canvas {
           display: block;
           margin: 0;
           position: absolute;
           top: 50%;
           left: 50%;
           transform: translate(-50%, -50%);
       }
   </style>
</head>

<body>
    <div id="phaser-example"></div>
   <!-- <script language="javascript" type="text/javascript" src="path/to/p5.sound.js"></script> -->
    <script src="https://cdn.jsdelivr.net/npm/phaser@3.15.1/dist/phaser.min.js"></script>
    <!--<script src="/socket.io/socket.io.js"></script> -->
    <script>
        

        window.onload = function () {
            window.focus()
            resize();
            window.addEventListener("resize", resize, false);
        }
        
        var points = 0;

        var config = {
            type: Phaser.WEBGL,
            width: 800,
            height: 600,
            backgroundColor: '#000000',
            parent: 'phaser-example',
            pixelArt: true,
            physics: {
                default: 'impact',
                impact: { gravity: 0 }
            },
            scene: {
                preload: preload,
                create: create,
                update: update
            }
        };

        var game = new Phaser.Game(config);
        var player;
        var cursors;
        var scoreText;

        function preload ()
        {
            this.load.image('tiles', 'static/assets/slopes32mud.png');
            this.load.image('player', 'static/assets/pajarito2xd.png');

            // A standard Weltmeister map with two layers: "map" & "collision"
            this.load.tilemapImpact('map', 'static/impact3.json');
        }

        function create ()
        {
            var map = this.make.tilemap({ key: 'map' });
            var tileset = map.addTilesetImage('media/tiles.png', 'tiles');
            scoreText = this.add.text(150, 150, 'score: 0', { fontSize: '32px', fill: '#000' });
            map.createBlankDynamicLayer('background', tileset)
                .fill(0)
                .setAlpha(0.3);

            var layer = map.createStaticLayer('map', tileset, 0, 0);
            this.impact.world.setCollisionMap('map');

            player = this.impact.add.image(64, 300, 'player'); 
            player.setMaxVelocity(500, 400).setFriction(800, 0);
            player.body.accelGround = 1200;
            player.body.accelAir = 600;
            player.body.jumpSpeed = 1000;

            this.cameras.main.setBounds(0, 0, map.widthInPixels, map.heightInPixels);
            this.cameras.main.startFollow(player);

            cursors = this.input.keyboard.createCursorKeys();

            var help = this.add.text(16, 16, 'Use your voice to go up or down, \n you have to match the pitch of the song! :)', {
                fontSize: '18px',
                fill: '#ffffff'
            });
            help.setScrollFactor(0);
        }

        function update (PrevFreq, Freq) {

            points = points + 1
            
            points += 10;
            scoreText.setText('Score: ' + points);

            console.log(Freq)
            var accel = player.body.standing ? player.body.accelGround : player.body.accelAir;

            var pitch = Math.round(Freq);
                if (pitch < prevPitch)
                    player.setVelocityY(250)
                else 
                    player.setVelocityY(-250)
        }
        
        function update_unactual (time, delta) {
            
            player.setVelocityX(50);

            points = points + 1
            
            points += 10;
            scoreText.setText('Score: ' + points);


            var accel = player.body.standing ? player.body.accelGround : player.body.accelAir;

            if (cursors.up.isDown)
            {
                player.setVelocityY(-250);
            }
            else if (cursors.down.isDown)
            {
                player.setVelocityY(250);
            }
            else{
                player.setVelocityY(0);
            }

            player.setVelocityX(200);
        }


        function resize() {
            var canvas = document.querySelector("canvas");
            var windowWidth = window.innerWidth;
            var windowHeight = window.innerHeight;
            var windowRatio = windowWidth / windowHeight;
            var gameRatio = game.config.width / game.config.height;
            if (windowRatio < gameRatio) {
                canvas.style.width = windowWidth + "px";
                canvas.style.height = (windowWidth / gameRatio) + "px";
            }
            else {
                canvas.style.width = (windowHeight * gameRatio) + "px";
                canvas.style.height = windowHeight + "px";
            }
        }


        /************************************
         ************************************
         ************************************/

        var prevPitch = 120;
        window.AudioContext = window.AudioContext || window.webkitAudioContext;

        var audioContext = null;
        var sourceNode = null;
        var analyser = null;
        var theBuffer = null;
        var mediaStreamSource = null;

        window.onload = function(e) {
            audioContext = new AudioContext();
            MAX_SIZE = Math.max(4,Math.floor(audioContext.sampleRate/5000));	// corresponds to a 5kHz signal

            //startButton = document.getElementById( "idButton" );
            e.preventDefault();
            theBuffer = null;

            var reader = new FileReader();
            reader.onload = function (event) {
                audioContext.decodeAudioData( event.target.result, function(buffer) {
                    theBuffer = buffer;
                }, function(){
                    alert("error loading!");
                }); 
            };
            reader.onerror = function (event) {
                alert("Error: " + reader.error );
            };
            reader.readAsArrayBuffer(e.dataTransfer.files[0]);
            return false;
        };

        function error() {
            alert('Stream generation failed.');
        }

        function getUserMedia(dictionary, callback) {
            try {
                navigator.getUserMedia = 
                    navigator.getUserMedia ||
                    navigator.webkitGetUserMedia ||
                    navigator.mozGetUserMedia;
                navigator.getUserMedia(dictionary, callback, error);
            } catch (e) {
                alert('getUserMedia threw exception :' + e);
            }
        }

        function gotStream(stream) {
            // Create an AudioNode from the stream.
            mediaStreamSource = audioContext.createMediaStreamSource(stream);

            // Connect it to the destination.
            analyser = audioContext.createAnalyser();
            analyser.fftSize = 2048;
            mediaStreamSource.connect( analyser );
            updatePitch();
        }

        //function toggleLiveInput() {
            getUserMedia(
            {
                "audio": {
                    "mandatory": {
                        "googEchoCancellation": "false",
                        "googAutoGainControl": "false",
                        "googNoiseSuppression": "false",
                        "googHighpassFilter": "false"
                    },
                    "optional": []
                },
            }, gotStream);
        //}

        function togglePlayback() {
            
            sourceNode = audioContext.createBufferSource();
            sourceNode.buffer = theBuffer;
            sourceNode.loop = true;

            analyser = audioContext.createAnalyser();
            analyser.fftSize = 2048;
            sourceNode.connect( analyser );
            analyser.connect( audioContext.destination );
            sourceNode.start( 0 );
            isPlaying = true;
            isLiveInput = false;
            updatePitch();

            return "stop";
        }

        var rafID = null;
        var tracks = null;
        var buflen = 1024;
        var buf = new Float32Array( buflen );

//        var noteStrings = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"];

        function noteFromPitch( frequency ) {
            var noteNum = 12 * (Math.log( frequency / 440 )/Math.log(2) );
            return Math.round( noteNum ) + 69;
        }

        function frequencyFromNoteNumber( note ) {
            return 440 * Math.pow(2,(note-69)/12);
        }

        function centsOffFromPitch( frequency, note ) {
            return Math.floor( 1200 * Math.log( frequency / frequencyFromNoteNumber( note ))/Math.log(2) );
        }  

        var MIN_SAMPLES = 0;  // will be initialized when AudioContext is created.
        var GOOD_ENOUGH_CORRELATION = 0.9; // this is the "bar" for how close a correlation needs to be

        function autoCorrelate( buf, sampleRate ) {
            var SIZE = buf.length;
            var MAX_SAMPLES = Math.floor(SIZE/2);
            var best_offset = -1;
            var best_correlation = 0;
            var rms = 0;
            var foundGoodCorrelation = false;
            var correlations = new Array(MAX_SAMPLES);

            for (var i=0;i<SIZE;i++) {
                var val = buf[i];
                rms += val*val;
            }
            rms = Math.sqrt(rms/SIZE);
            if (rms<0.01) // not enough signal
                return -1;

            var lastCorrelation=1;
            for (var offset = MIN_SAMPLES; offset < MAX_SAMPLES; offset++) {
                var correlation = 0;

                for (var i=0; i<MAX_SAMPLES; i++) {
                    correlation += Math.abs((buf[i])-(buf[i+offset]));
                }
                correlation = 1 - (correlation/MAX_SAMPLES);
                correlations[offset] = correlation; // store it, for the tweaking we need to do below.
                if ((correlation>GOOD_ENOUGH_CORRELATION) && (correlation > lastCorrelation)) {
                    foundGoodCorrelation = true;
                    if (correlation > best_correlation) {
                        best_correlation = correlation;
                        best_offset = offset;
                    }
                } else if (foundGoodCorrelation) {
                    // short-circuit - we found a good correlation, then a bad one, so we'd just be seeing copies from here.
                    // Now we need to tweak the offset - by interpolating between the values to the left and right of the
                    // best offset, and shifting it a bit.  This is complex, and HACKY in this code (happy to take PRs!) -
                    // we need to do a curve fit on correlations[] around best_offset in order to better determine precise
                    // (anti-aliased) offset.

                    // we know best_offset >=1, 
                    // since foundGoodCorrelation cannot go to true until the second pass (offset=1), and 
                    // we can't drop into this clause until the following pass (else if).
                    var shift = (correlations[best_offset+1] - correlations[best_offset-1])/correlations[best_offset];  
                    return sampleRate/(best_offset+(8*shift));
                }
                lastCorrelation = correlation;
            }
            if (best_correlation > 0.01) {
                 console.log("f = " + sampleRate/best_offset + "Hz (rms: " + rms + " confidence: " + best_correlation + ")")
                return sampleRate/best_offset;
            }
            return -1;
        	var best_frequency = sampleRate/best_offset;
        }

        function updatePitch( time ) {
            var cycles = new Array;
            analyser.getFloatTimeDomainData( buf );
            var ac = autoCorrelate( buf, audioContext.sampleRate );
            // TODO: Paint confidence meter on canvasElem here.

            if (ac == -1) {
                player.setVelocityY(0)
                player.setVelocityX(0)
            } else {
                player.setVelocityX(200)
                update(prevPitch,ac)
            }

            if (!window.requestAnimationFrame)
                window.requestAnimationFrame = window.webkitRequestAnimationFrame;
            rafID = window.requestAnimationFrame( updatePitch );
        }


    </script>
</body>