<html>

<head>
   <meta charset=“utf-8”>
   <title>Equisde</title>
   <style>
       body {
           background: #000000;
           padding: 0px;
           margin: 0px;
       }
       canvas {
           display: block;
           margin: 0;
           position: absolute;
           top: 50%;
           left: 50%;
           transform: translate(-50%, -50%);
       }
   </style>
</head>

<body>
    <script src="../API/API.js"></script>
    <div id="phaser-example"></div>

    <script src="https://cdn.jsdelivr.net/npm/phaser@3.15.1/dist/phaser.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        window.onload = function () {
            window.focus()
            resize();
            window.addEventListener("resize", resize, false);
        }
        
        var points = 0;

        var config = {
            type: Phaser.WEBGL,
            width: 800,
            height: 600,
            backgroundColor: '#000000',
            parent: 'phaser-example',
            pixelArt: true,
            physics: {
                default: 'impact',
                impact: { gravity: 0 }
            },
            scene: {
                preload: preload,
                create: create,
                update: update
            }
        };

        var game = new Phaser.Game(config);
        var player;
        var cursors;
        var scoreText;

        function preload ()
        {
            this.load.image('tiles', 'static/assets/slopes32mud.png');
            this.load.image('player', 'static/assets/pajarito2xd.png');

            // A standard Weltmeister map with two layers: "map" & "collision"
            this.load.tilemapImpact('map', 'static/impact3.json');
        }

        function create ()
        {
            var map = this.make.tilemap({ key: 'map' });
            var tileset = map.addTilesetImage('media/tiles.png', 'tiles');
            scoreText = this.add.text(150, 150, 'score: 0', { fontSize: '32px', fill: '#000' });
            map.createBlankDynamicLayer('background', tileset)
                .fill(0)
                .setAlpha(0.3);

            var layer = map.createStaticLayer('map', tileset, 0, 0);
            this.impact.world.setCollisionMap('map');

            player = this.impact.add.image(64, 300, 'player'); 
            player.setMaxVelocity(500, 400).setFriction(800, 0);
            player.body.accelGround = 1200;
            player.body.accelAir = 600;
            player.body.jumpSpeed = 1000;

            this.cameras.main.setBounds(0, 0, map.widthInPixels, map.heightInPixels);
            this.cameras.main.startFollow(player);

            cursors = this.input.keyboard.createCursorKeys();

            var help = this.add.text(16, 16, 'Use your voice to go up or down, \n you have to match the pitch of the song! :)', {
                fontSize: '18px',
                fill: '#ffffff'
            });
            help.setScrollFactor(0);
        }

        function update (time, delta)
        {

            points = points + 1
            
            points += 10;
            scoreText.setText('Score: ' + points);


            var accel = player.body.standing ? player.body.accelGround : player.body.accelAir;

            if (cursors.up.isDown)
            {
                player.setVelocityY(-200);
            }
            else if (cursors.down.isDown)
            {
                player.setVelocityY(200);
            }
            else{
                player.setVelocityY(0);
            }

            player.setVelocityX(200);
        }


        function resize() {
            var canvas = document.querySelector("canvas");
            var windowWidth = window.innerWidth;
            var windowHeight = window.innerHeight;
            var windowRatio = windowWidth / windowHeight;
            var gameRatio = game.config.width / game.config.height;
            if (windowRatio < gameRatio) {
                canvas.style.width = windowWidth + "px";
                canvas.style.height = (windowWidth / gameRatio) + "px";
            }
            else {
                canvas.style.width = (windowHeight * gameRatio) + "px";
                canvas.style.height = windowHeight + "px";
            }
        }
    </script>
</body>
